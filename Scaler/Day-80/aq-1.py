class Solution:    def recoverTree(self, A):        p = None        f = None        s = None        p, f, s = self.inOrderNew(A, p, f, s)        return [s.val, f.val]    def inOrderNew(self, A, p, f, s):        if A == None:            return [p, f, s]        p, f, s = self.inOrderNew(A.left, p, f, s)        if p is not None and p.val > A.val:            if f is None:                f = p                s = A            else:                s = A        p = A        p, f, s = self.inOrderNew(A.right, p, f, s)        return [p, f, s]